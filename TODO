☐ ICONS MODULE
☐ LOGIN MODULE
☐ TEMPLATES MODULE
☐ GENERATE AA DOC


☐ tp client :
  ☐ créer le module ClientsModule
  ☐ en même temps ClientsRoutingModule
  ☐ créer un dossier pages
  ☐ PageListClientsComponent, PageAddClientComponent, PageEditClientComponent

☐ tp routing first part
  ☐ ajouter une route 'clients' pour charger en lazy loading ClientsModule
  ☐ ajouter une route '??' pour charger en lazy loading PageNotFoundModule

✔ découpage des routes sur les différents modules de routing @done(21-02-24 11:16)
✔ loginrouting module @done(21-02-24 11:16)
✔ preloading de modules pour le lazy loading @done(21-02-24 11:16)

✔ async pipe @done(21-02-25 14:22)
✔ ex de unsubscribe (sur signin) @done(21-02-25 14:34)
✔ directive perso @done(21-02-25 16:22)

☐ tp clients
  ☐ enum client (db.json)
  ☐ interface client (db.json)
  ☐ modele client (state ACTIVE , tva 20, totalCaHt 0)
  ☐ le service client
  ☐ page  list client ts
  ☐ page list client html
    ☐ app template full width
    ☐ app table light
      ☐ colones du tableau : name, total ht, total ttc (a calculer), state
      ☐ utilisez le meme pipe total que sur orders pour calculer le total ttc des clients
      ☐ utilisez la meme directive que sur les orders (scss : .state-active, .state-inactive)

☐ evals et emargement
☐ coaching and drive adresses gmail

☐ tp edit order

☐ page-list-orders.component.html
    ☐ ajoute un td au debut d'un tr et on met un icon-edit dedans
    ☐ (click)="goToEdit(item.id)"
  ☐ page-list-orders.component.ts
    ☐ Ajouter "Actions" en entête
    ☐ Déclarer fa fn goToEdit(id: number):void et rediriger vers la route orders/edit/3
    this.router.navigate(['orders', 'edit', id])
  ☐ orders-routing.module.ts
    ☐ modifier la route edit pour qu'elle autorise un paramètre id après le edit/

  on arrive sur la route orders/edit/3
  ☐ page-edit-order-component.ts
    ☐ Récupérer l'id dans la route (ActivatedRoute)
    ☐ this.ordersService.getItemById(id).subscribe(....flux etant votre item)
    ☐ dans le subscribe() on recupère le flux et on initialise une propriété item: Order ou  (item$ : Observable<Order>);
  ☐ orders.service.ts
    ☐ Déclare la fn getItemById(id: number): Observable<Order>
  ☐ page-edit-order.component.html
    ☐ On utilise template-container component
    ☐ On utilise form-order component : Binder l'@Input() init avec la propriété item (attention à la valeur d'item)
    ☐ Pour l'@Output() (submited)="edit($event)"
  ☐ page-edit-order.component.ts
    ☐ Déclarer la fn edit(item: Order) {utliser this.ordersService.update(item).subscribe(ici res de l'api)}
    ☐ Dans le subscribe, rediriger l'utilisateur vers la route orders


  ☐ validator formulaires
